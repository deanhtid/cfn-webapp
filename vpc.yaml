AWSTemplateFormatVersion: 2010-09-09
Description: VPC with two private and two public subnets
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Parameters
        Parameters:
          - ClassB
Parameters:
  ClassB:
    Description: Class B of VPC (10.XXX.0.0/16)
    Type: Number
    Default: 0
    ConstraintDescription: "0-255"
    MinValue: 0
    MaxValue: 255
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub "10.${ClassB}.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "10.${ClassB}.0.0/16"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "10.${ClassB}.0.0/16"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public A
  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private A
  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public B
  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private B
  RouteTablePublicA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public A
  RouteTablePrivateA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private A
  RouteTablePublicB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public B
  RouteTablePrivateB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private B
  RouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetPublicA'
      RouteTableId: !Ref 'RouteTablePublicA'
  RouteTableAssociationPrivateA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetPrivateA'
      RouteTableId: !Ref 'RouteTablePrivateA'
  RouteTableAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetPublicB'
      RouteTableId: !Ref 'RouteTablePublicB'
  RouteTableAssociationPrivateB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetPrivateB'
      RouteTableId: !Ref 'RouteTablePrivateB'
  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTablePublicA'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  RouteTablePublicBInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTablePublicB'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  NACLPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: Public
  NACLPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        - Key: Name
          Value: Private
  SubnetNACLAssociationPublicA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "SubnetPublicA"
      NetworkAclId: !Ref "NACLPublic"
  SubnetNACLAssociationPrivateA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "SubnetPrivateA"
      NetworkAclId: !Ref "NACLPrivate"
  SubnetNACLAssociationPublicB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "SubnetPublicB"
      NetworkAclId: !Ref "NACLPublic"
  SubnetNACLAssociationPrivateB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref "SubnetPrivateB"
      NetworkAclId: !Ref "NACLPrivate"
  NACLEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NACLPublic"
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
  NACLEntryOutPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NACLPublic"
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
  NACLEntryInPrivateAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NACLPrivate"
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
  NACLEntryOutPrivateAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref "NACLPrivate"
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: "0.0.0.0/0"
  NATEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATEIPA.AllocationId'
      SubnetId: !Ref 'SubnetPublicA'
      Tags:
        - Key: Name
          Value: NAT-A
  NATEIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATEIPB.AllocationId'
      SubnetId: !Ref 'SubnetPublicB'
      Tags:
        - Key: Name
          Value: NAT-B
  NATARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'RouteTablePrivateA'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGatewayA'
  NATBRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'RouteTablePrivateB'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGatewayB'
Outputs:
  StackName:
    Description: Stack name.
    Value: !Sub "${AWS::StackName}"
  AZs:
    Description: Number of AZs
    Value: 2
    Export:
      Name: !Sub "${AWS::StackName}-AZs"
  AZList:
    Description: List of AZs
    Value: !Join
      - ","
      - - !Select
          - 0
          - !GetAZs ""
        - !Select
          - 1
          - !GetAZs ""
    Export:
      Name: !Sub "${AWS::StackName}-AZList"
  AZA:
    Description: AZ A
    Value: !Select
      - 0
      - !GetAZs ""
    Export:
      Name: !Sub "${AWS::StackName}-AZA"
  AZB:
    Description: AZ B
    Value: !Select
      - 1
      - !GetAZs ""
    Export:
      Name: !Sub "${AWS::StackName}-AZB"
  CidrBlock:
    Description: The set of IP addresses for the VPC.
    Value: !GetAtt "VPC.CidrBlock"
    Export:
      Name: !Sub "${AWS::StackName}-CidrBlock"
  VPC:
    Description: VPC.
    Value: !Ref "VPC"
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  InternetGateway:
    Description: InternetGateway.
    Value: !Ref "InternetGateway"
    Export:
      Name: !Sub "${AWS::StackName}-InternetGateway"
  SubnetsPublic:
    Description: Subnets public.
    Value: !Join
      - ","
      - - !Ref "SubnetPublicA"
        - !Ref "SubnetPublicB"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetsPublic"
  SubnetsPrivate:
    Description: Subnets private.
    Value: !Join
      - ","
      - - !Ref "SubnetPrivateA"
        - !Ref "SubnetPrivateB"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetsPrivate"
  RouteTablesPrivate:
    Description: Route tables private.
    Value: !Join
      - ","
      - - !Ref "RouteTablePrivateA"
        - !Ref "RouteTablePrivateB"
    Export:
      Name: !Sub "${AWS::StackName}-RouteTablesPrivate"
  RouteTablesPublic:
    Description: Route tables public.
    Value: !Join
      - ","
      - - !Ref "RouteTablePublicA"
        - !Ref "RouteTablePublicB"
    Export:
      Name: !Sub "${AWS::StackName}-RouteTablesPublic"
  SubnetAPublic:
    Description: Subnet A public.
    Value: !Ref "SubnetPublicA"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetAPublic"
  RouteTableAPublic:
    Description: Route table A public.
    Value: !Ref "RouteTablePublicA"
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableAPublic"
  SubnetAPrivate:
    Description: Subnet A private.
    Value: !Ref "SubnetPrivateA"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetAPrivate"
  RouteTableAPrivate:
    Description: Route table A private.
    Value: !Ref "RouteTablePrivateA"
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableAPrivate"
  SubnetBPublic:
    Description: Subnet B public.
    Value: !Ref "SubnetPublicB"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetBPublic"
  RouteTableBPublic:
    Description: Route table B public.
    Value: !Ref "RouteTablePublicB"
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableBPublic"
  SubnetBPrivate:
    Description: Subnet B private.
    Value: !Ref "SubnetPrivateB"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetBPrivate"
  RouteTableBPrivate:
    Description: Route table B private.
    Value: !Ref "RouteTablePrivateB"
    Export:
      Name: !Sub "${AWS::StackName}-RouteTableBPrivate"
  NATIPA:
    Description: The public IP address of NAT gateway A.
    Value: !Ref 'NATEIPA'
    Export:
      Name: !Sub '${AWS::StackName}-NATIPA'
  NATIPB:
    Description: The public IP address of NAT gateway A.
    Value: !Ref 'NATEIPB'
    Export:
      Name: !Sub '${AWS::StackName}-NATIPB'
