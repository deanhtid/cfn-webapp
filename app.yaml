AWSTemplateFormatVersion: 2010-09-09
Description: WebApp Template using ECS, Autoscaling, and CloudWatch
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parent Stack
        Parameters:
          - ParentVPCStack
Parameters:
  ParentVPCStack:
    Description: Stack name of the VPC Template
    Type: String
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key for ssh access
    Default: dev
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of instances
  MaxSize:
    Type: Number
    Default: '4'
    Description: Max number of instances
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
  ImageID:
    Description: Latest ECS optimised amazon Linux 2 Image eu-west-2
    Type: AWS::EC2::Image::Id
    Default: ami-0229ad66a59113c47
Resources: 
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: WebAppCluster
      Tags:
        - Key: Name
          Value: WebAppCluster
        - Key: Environment
          Value: Development
  SGALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Application Load Balancer
      VpcId: !ImportValue
        Fn::Sub: ${ParentVPCStack}-VPC
  SGWebAPP:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for the Web Application
      VpcId: !ImportValue
        Fn::Sub: ${ParentVPCStack}-VPC
  SGALBHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SGALB'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: '0.0.0.0/0'
      Description: HTTP Internet
  SGSGWebfromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SGWebAPP'
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref 'SGALB'
      Description: HTTP ALB
  ECSCWLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - ECSCWLogGroup
          - !Ref 'AWS::StackName'
      RetentionInDays: 14
  WebAppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - -webapp
      ContainerDefinitions:
        - Name: webapp
          Cpu: 10
          Essential: true
          Image: httpd:2.4
          Memory: 300
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'ECSCWLogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: webapp
          MountPoints:
            - ContainerPath: /usr/local/apache2/htdocs
              SourceVolume: webapp-vol
          PortMappings:
            - ContainerPort: 80
        - Name: utils
          Cpu: 10
          Command:
            - >-
              /bin/sh -c "while true; do echo '<html> <head> <title>Deans Web Application</title> <style>body {margin-top: 40px; background-color: #8b0000;} </style> </head><body> <div style=color:white;text-align:center>
              <h1>Deans Web Application</h1> <h2>Hello Trevor and Ian</h2> <p>SaleCycle is Awesome</p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html
              ; sleep 1; done"
          EntryPoint:
            - sh
            - -c
          Essential: false
          Image: busybox
          Memory: 200
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'ECSCWLogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: webapp
          VolumesFrom:
            - SourceContainer: webapp
      Volumes:
        - Name: webapp-vol
  ALBWebApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALBWebApp
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !ImportValue
          Fn::Sub: ${ParentVPCStack}-SubnetAPublic
        - !ImportValue
          Fn::Sub: ${ParentVPCStack}-SubnetBPublic
      SecurityGroups:
        - !Ref 'SGALB'
      Tags:
        - Key: Name
          Value: ALBWebApp
        - Key: Environment
          Value: Development
  ALBWebAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 
      LoadBalancerArn: !Ref 
      Port: 80
      Protocol: HTTP
  ALBWebAppListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: 
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: 
      Priority: 1
  ALBWebAppTG01:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALBWebApp
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ALBWebAppTG01
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue
        Fn::Sub: ${ParentVPCStack}-VPC
      Tags:
        - Key: Name
          Value: ALBWebAppTG01
        - Key: Environment
          Value: Development
Outputs: